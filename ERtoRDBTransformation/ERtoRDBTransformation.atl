-- @path ERModel=/ERMetamodel/model/ERMetaModel.ecore
-- @path RDBModel=/RDBMetamodel/model/RDBMetaModel.ecore

module ERtoRDBTransformation;

create OUT : RDBModel from IN : ERModel;

rule Diagram2Database {
	from 
		diag : ERModel!Diagram
	to
		db: RDBModel!Database(
			tables <- diag.entities,
			name <- diag.name
		)
}

-- Transform each Entity to a Table
rule Entity2Table {
    from
        e : ERModel!Entity 
    to
        t : RDBModel!Table (
            name <- e.name,
            columns <- e.attributes->collect(a | thisModule.Attribute2Column(a)),
            primaryKey <- thisModule.Key2PrimaryKey(e.attributes->select(a | a.isPrimary))
        )
}

-- Helper function to map ERModel enum types to RDBModel enum types
helper def : mapType(type : ERModel!DataType) : RDBModel!DataType =
    if type= #ERNumber then
        #RDBInteger
    else 
    	if type = #ERDecimal then
        	#RDBReal
	    else 
	    	if type = #ERText then
		        #RDBString
		    else 
		    	if type = #ERBoolean then
			        #RDBBoolean
			    else
			    	if type = #ERDate then
				        #RDBDate
				    else
				    	if type = #ERTime then
					        #RDBTime
					    else
					        type
						endif
					endif
				endif
			endif
		endif
    endif;


-- Transform Attributes to Columns
unique lazy rule Attribute2Column {
    from
        a : ERModel!Attribute
    to
        c : RDBModel!Column (
            name <- a.name,
            type <- thisModule.mapType(a.type),
            isNullable <- a.isNullable,
			isUnique <- a.isUnique
        )
}


-- Transform Primary Key attributes into actual Primary Keys
unique lazy rule Key2PrimaryKey {
    from
        pkAttributes : Sequence(ERModel!Attribute)
    to
        pk : RDBModel!PrimaryKey (
            columns <- pkAttributes->collect(a | thisModule.Attribute2Column(a))
        )
}


-- Handle 1-to-many Relationships by Creating Foreign Keys (source: "one", target: "many")
rule OneToManyRelationship2ForeignKey {
    from
        r : ERModel!Relationship (r.isOneToMany())
	using {
        fkCol : RDBModel!Column = thisModule.ForeignKeyColumn(r.source);
    }
    to
        fk : RDBModel!ForeignKey (
            sourceTable <- r.target.getTable(),
            targetTable <- r.source.getTable(),
            sourceColumn <- fkCol,
			targetColumn <- thisModule.Attribute2Column(r.source.attributes->select(a | a.isPrimary).first())
        )
	do {
        r.target.getTable().columns <- r.target.getTable().columns->union(Set{fkCol});
    }
}


-- Handle many-to-1 Relationships by Creating Foreign Keys (source: "many", target: "one")
rule ManyToOneRelationship2ForeignKey {
    from
        r : ERModel!Relationship (r.isManyToOne())
	using {
        fkCol : RDBModel!Column = thisModule.ForeignKeyColumn(r.target);
    }
    to
        fk : RDBModel!ForeignKey (
            sourceTable <- r.source.getTable(),
            targetTable <- r.target.getTable(),
            sourceColumn <- fkCol,
            targetColumn <- thisModule.Attribute2Column(r.target.attributes->select(a | a.isPrimary).first())
        )
    do {
        r.source.getTable().columns <- r.source.getTable().columns->union(Set{fkCol});
    }
}


-- Builds a PrimaryKey object from a list of columns
lazy rule columnsToPK {
	from
		cols: Sequence(RDBModel!Column)
	to
		pk: RDBModel!PrimaryKey(
			columns <- cols
		)
}


-- Handle Many-to-many Relationships by Creating a Join Table with Composite Primary Key and Foreign Keys
rule ManyToManyRelationship2JoinTable {
    from
        r : ERModel!Relationship (r.isManyToMany())
	using {
        sourceFK : RDBModel!Column = thisModule.ForeignKeyColumn(r.source);
        targetFK : RDBModel!Column = thisModule.ForeignKeyColumn(r.target);
    }
    to
        joinTable : RDBModel!Table (
            name <- r.source.name + '_' + r.target.name + '_Join',
            columns <- Sequence {
                sourceFK,
                targetFK
            },
            primaryKey <- thisModule.columnsToPK(Sequence {
                sourceFK,
                targetFK
            }),
            foreignKeys <- Sequence {
                thisModule.CreateForeignKeyForJoinTable(
                    joinTable,
                    r.source,
                    sourceFK
                ),
                thisModule.CreateForeignKeyForJoinTable(
                    joinTable,
                    r.target,
                    targetFK
                )
            }
        )
    do {
        -- Add the join table to the database
        thisModule.getDatabase().tables <- thisModule.getDatabase().tables->union(Set{joinTable});
    }
}



-- Helper rule to create ForeignKey object for each side of the Join Table
lazy rule CreateForeignKeyForJoinTable {
    from
        joinTable : RDBModel!Table,
        targetEntity : ERModel!Entity,
        sourceColumn : RDBModel!Column
    to
        fk : RDBModel!ForeignKey (
            sourceTable <- joinTable,
            targetTable <- targetEntity,
            sourceColumn <- sourceColumn,
            targetColumn <- thisModule.Attribute2Column(targetEntity.attributes->select(a | a.isPrimary).first())
        )
}


-- Helper to create a ForeignKey column
lazy rule ForeignKeyColumn {
	from
		targetEntity: ERModel!Entity
	to
		t: RDBModel!Column (
        name <- targetEntity.name + '_id',
        type <- #RDBInteger,
        isNullable <- false
    )
}

-- Helper for many-to-many relationships (returns true if many-to-many)
helper context ERModel!Relationship def : isManyToMany() : Boolean = 
    ((self.sourceCardinality.maxValue = -1 or self.sourceCardinality.maxValue > 1) and (self.targetCardinality.maxValue = -1 or self.targetCardinality.maxValue > 1));

-- Helper for one-to-many relationships (returns true if one-to-many)
helper context ERModel!Relationship def : isOneToMany() : Boolean = 
	self.sourceCardinality.maxValue = 1 and (self.targetCardinality.maxValue = -1 or self.targetCardinality.maxValue > 1);

-- Helper for many-to-one relationships (returns true if many-to-one)
helper context ERModel!Relationship def : isManyToOne() : Boolean = 
	(self.sourceCardinality.maxValue = -1 or self.sourceCardinality.maxValue > 1)  and self.targetCardinality.maxValue = 1;

-- Helper to retrieve the corresponding Table for an Entity
helper context ERModel!Entity def: getTable() : RDBModel!Table =
    RDBModel!Table.allInstances()->select(t | t.name = self.name)->first();
	
helper def : getDatabase() : RDBModel!Database =
    RDBModel!Database.allInstances()->first();
	
	